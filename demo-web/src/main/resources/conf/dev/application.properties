############## server ##############
#指定端口号
server.port = 9090
#指定context path
server.servlet.context-path = /aaron-demo

############## db ##############
spring.datasource.driverClassName = com.mysql.jdbc.Driver
spring.datasource.url = jdbc:mysql://localhost:3306/project?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC
spring.datasource.username = root
spring.datasource.password = root

############## mybatis ##############
mybatis.mapper-locations = classpath:mybatis/*/*.xml
mybatis.type-aliases-package = com.example.demo.dao.entity

############## mybatis-plus ##############
# 如果是放在resource目录 classpath:/mapper/*Mapper.xml
mybatis-plus.mapper-locations = classpath:mybatis/*/*.xml
# 实体扫描，多个package用逗号或者分号分隔
mybatis-plus.type-aliases-package = com.example.demo.dao.entity
# 主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";
mybatis-plus.global-config.id-type = 0
# 驼峰下划线转换
mybatis-plus.global-config.db-config.column-underline = true
# 刷新mapper 调试神器
mybatis-plus.global-config.refresh-mapper = true
# 数据库大写下划线转换
#mybatis-plus.global-config.capital-mode = true
# 序列接口实现类配置
#mybatis-plus.global-config.key-generator=com.baomidou.springboot.xxx
# 逻辑删除配置
#mybatis-plus.global-config.logic-delete-value = 0
#mybatis-plus.global-config.logic-not-delete-value = 1
# 自定义填充策略接口实现
#mybatis-plus.global-config.meta-object-handler=com.baomidou.springboot.xxx
# 自定义SQL注入器
#mybatis-plus.global-config.sql-injector=com.baomidou.springboot.xxx
mybatis-plus.configuration.map-underscore-to-camel-case = true
mybatis-plus.configuration.cache-enabled = false


############## log ##############
log.charset = UTF-8
log.level = INFO
log.path = ./logs
log.pattern = %red([%d{'MM-dd HH:mm:ss,SSS',GMT+8:00}]) %green(%level) %highlight([%thread]) %boldMagenta(%logger{0}[%line]) - %cyan(%msg%n)

swagger.enabled = true
javamelody.init-parameters.authorized-users = admin:123456a!
javamelody.init-parameters.monitoring-path = /demo/monitoring

spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.jackson.time-zone=GMT+8

############## redis ##############
#spring.redis.database = 1
# Redis服务器地址
#spring.redis.host = 47.95.208.138
# Redis服务器连接端口
#spring.redis.port = 6379
# Redis服务器连接密码（默认为空）
spring.redis.password =
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.jedis.pool.max-active = 8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.jedis.pool.max-wait=-1
# 连接池中的最大空闲连接
spring.redis.jedis.pool.max-idle = 8
# 连接池中的最小空闲连接
spring.redis.jedis.pool.min-idle = 1
# 连接超时时间（毫秒）
spring.redis.timeout=0
spring.redis.commandTimeout=5000
############################### redis.cluster configuration ###############################
spring.redis.cluster.nodes=47.104.9.23:6000,47.104.9.23:6001,47.104.9.23:6002,47.104.9.23:6003,47.104.9.23:6004,47.104.9.23:6005
# 最大的要重定向的次数（由于集群中数据存储在多个节点所以，在访问数据时需要通过节点进行转发）
spring.redis.cluster.max-redirects=2
#  连接超时的时间
spring.redis.cluster.timeout=5000
# 最大的连接重试次数
spring.redis.cluster.max-attempts=3
# 最大空闲数
spring.redis.cluster.maxIdle=300
# #控制一个pool可分配多少个jedis实例,用来替换上面的redis.maxActive,如果是jedis 2.4以后用该属性
spring.redis.cluster.maxTotal=1000
# 最大建立连接等待时间。如果超过此时间将接到异常。设为-1表示无限制。
spring.redis.cluster.maxWaitMillis=1000
# 连接的最小空闲时间 默认1800000毫秒(30分钟)
spring.redis.cluster.minEvictableIdleTimeMillis=300000
# 每次释放连接的最大数目,默认3
spring.redis.cluster.numTestsPerEvictionRun=1024
# 逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1
spring.redis.cluster.timeBetweenEvictionRunsMillis=30000
# 是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个
spring.redis.cluster.testOnBorrow=true
# 在空闲时检查有效性, 默认false
spring.redis.cluster.testWhileIdle=true
spring.redis.cluster.password=a123456


############## dubbo ##############
# 当前应用名称，用于注册中心计算应用间依赖关系
dubbo.application.name = demo
# 组织名称，用于注册中心区分服务来源
dubbo.application.organization = example
# 应用负责人，用于服务治理
dubbo.application.owner = wuhengzhen
# 注册中心地址协议
dubbo.registry.protocol = zookeeper
# 注册中心服务器地址
dubbo.registry.address = 47.104.9.23:2171
# 协议名称
dubbo.protocol.name = dubbo
# 服务端口
dubbo.protocol.port = 21880
# 服务版本
dubbo.provider.version = 1.0.0.dev
# 远程服务调用超时时间(毫秒)
dubbo.provider.timeout = 60000
# 启动时检查提供者是否存在
dubbo.consumer.check = false

